{"version":3,"sources":["webpack:///./assets/js/theme/brands.js","webpack:///./assets/js/theme/roots/brands.js","webpack:///./assets/js/theme/common/url-utils.js","webpack:///./assets/js/theme/catalog.js"],"names":["Brands","onReady","$","length","addClass","CatalogPage","urlUtils","getUrl","window","location","pathname","search","goToUrl","url","history","pushState","document","title","trigger","replaceParams","params","param","parsed","Url","parse","hasOwnProperty","query","format","buildQueryString","queryData","key","out","Array","isArray","ndx","substring","parseQueryParams","i","temp","split","push","onSortBySubmit","event","href","queryParams","currentTarget","serialize","page","preventDefault","PageManager"],"mappings":"4QAGqBA,E,yKACjBC,QAAA,WCAIC,IAAE,mEAAmEC,OAAS,GAC9ED,IAAE,kCAAkCE,SAAS,qB,GDFjBC,M,uFED9BC,EAAW,CACbC,OAAQ,oBAASC,OAAOC,SAASC,SAAWF,OAAOC,SAASE,QAE5DC,QAAS,SAACC,GACNL,OAAOM,QAAQC,UAAU,GAAIC,SAASC,MAAOJ,GAC7CX,EAAEM,QAAQU,QAAQ,gBAGtBC,cAAe,SAACN,EAAKO,GACjB,IACIC,EADEC,EAASC,IAAIC,MAAMX,GAAK,GAM9B,IAAKQ,KAFLC,EAAOX,OAAS,KAEFS,EACNA,EAAOK,eAAeJ,KACtBC,EAAOI,MAAML,GAASD,EAAOC,IAIrC,OAAOE,IAAII,OAAOL,IAGtBM,iBAAkB,SAACC,GACf,IACIC,EADAC,EAAM,GAEV,IAAKD,KAAOD,EACR,GAAIA,EAAUJ,eAAeK,GACzB,GAAIE,MAAMC,QAAQJ,EAAUC,IAAO,CAC/B,IAAII,OAAG,EAEP,IAAKA,KAAOL,EAAUC,GACdD,EAAUC,GAAKL,eAAeS,KAC9BH,GAAO,IAAID,EAAR,IAAeD,EAAUC,GAAKI,SAIzCH,GAAO,IAAID,EAAR,IAAeD,EAAUC,GAKxC,OAAOC,EAAII,UAAU,IAGzBC,iBAAkB,SAACP,GAGf,IAFA,IAAMT,EAAS,GAENiB,EAAI,EAAGA,EAAIR,EAAU1B,OAAQkC,IAAK,CACvC,IAAMC,EAAOT,EAAUQ,GAAGE,MAAM,KAE5BD,EAAK,KAAMlB,EACPY,MAAMC,QAAQb,EAAOkB,EAAK,KAC1BlB,EAAOkB,EAAK,IAAIE,KAAKF,EAAK,IAE1BlB,EAAOkB,EAAK,IAAM,CAAClB,EAAOkB,EAAK,IAAKA,EAAK,IAG7ClB,EAAOkB,EAAK,IAAMA,EAAK,GAI/B,OAAOlB,IAIAd,Q,0PCjEMD,E,yKACjBoC,eAAA,SAAeC,GACX,IAAM7B,EAAMU,IAAIC,MAAMhB,OAAOC,SAASkC,MAAM,GACtCC,EAAc1C,EAAEwC,EAAMG,eAAeC,YAAYP,MAAM,KAE7D1B,EAAIa,MAAMkB,EAAY,IAAMA,EAAY,UACjC/B,EAAIa,MAAMqB,KAEjBL,EAAMM,iBACNxC,OAAOC,SAAWc,IAAII,OAAO,CAAEjB,SAAUG,EAAIH,SAAUC,OAAQL,IAASsB,iBAAiBf,EAAIa,U,GAT5DuB,O","file":"theme-bundle.chunk.13.js","sourcesContent":["import CatalogPage from './catalog';\r\nimport rootsLoaded from './roots/brands';\r\n\r\nexport default class Brands extends CatalogPage {\r\n    onReady() {\r\n        rootsLoaded();\r\n    }\r\n}\r\n","import $ from 'jquery';\r\n\r\nexport default function loaded() {\r\n    // subcategory display\r\n    if ($('.page-content-subcategories .image-wrap:not(.image-placeholder)').length > 0) {\r\n        $('.page-content-subcategories ul').addClass('subcategory-grid');\r\n    }\r\n}\r\n","import Url from 'url';\r\n\r\nconst urlUtils = {\r\n    getUrl: () => `${window.location.pathname}${window.location.search}`,\r\n\r\n    goToUrl: (url) => {\r\n        window.history.pushState({}, document.title, url);\r\n        $(window).trigger('statechange');\r\n    },\r\n\r\n    replaceParams: (url, params) => {\r\n        const parsed = Url.parse(url, true);\r\n        let param;\r\n\r\n        // Let the formatter use the query object to build the new url\r\n        parsed.search = null;\r\n\r\n        for (param in params) {\r\n            if (params.hasOwnProperty(param)) {\r\n                parsed.query[param] = params[param];\r\n            }\r\n        }\r\n\r\n        return Url.format(parsed);\r\n    },\r\n\r\n    buildQueryString: (queryData) => {\r\n        let out = '';\r\n        let key;\r\n        for (key in queryData) {\r\n            if (queryData.hasOwnProperty(key)) {\r\n                if (Array.isArray(queryData[key])) {\r\n                    let ndx;\r\n\r\n                    for (ndx in queryData[key]) {\r\n                        if (queryData[key].hasOwnProperty(ndx)) {\r\n                            out += `&${key}=${queryData[key][ndx]}`;\r\n                        }\r\n                    }\r\n                } else {\r\n                    out += `&${key}=${queryData[key]}`;\r\n                }\r\n            }\r\n        }\r\n\r\n        return out.substring(1);\r\n    },\r\n\r\n    parseQueryParams: (queryData) => {\r\n        const params = {};\r\n\r\n        for (let i = 0; i < queryData.length; i++) {\r\n            const temp = queryData[i].split('=');\r\n\r\n            if (temp[0] in params) {\r\n                if (Array.isArray(params[temp[0]])) {\r\n                    params[temp[0]].push(temp[1]);\r\n                } else {\r\n                    params[temp[0]] = [params[temp[0]], temp[1]];\r\n                }\r\n            } else {\r\n                params[temp[0]] = temp[1];\r\n            }\r\n        }\r\n\r\n        return params;\r\n    },\r\n};\r\n\r\nexport default urlUtils;\r\n","import PageManager from './page-manager';\r\nimport urlUtils from './common/url-utils';\r\nimport Url from 'url';\r\n\r\nexport default class CatalogPage extends PageManager {\r\n    onSortBySubmit(event) {\r\n        const url = Url.parse(window.location.href, true);\r\n        const queryParams = $(event.currentTarget).serialize().split('=');\r\n\r\n        url.query[queryParams[0]] = queryParams[1];\r\n        delete url.query.page;\r\n\r\n        event.preventDefault();\r\n        window.location = Url.format({ pathname: url.pathname, search: urlUtils.buildQueryString(url.query) });\r\n    }\r\n}\r\n"],"sourceRoot":""}